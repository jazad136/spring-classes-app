{
	"classes" : [ 
		{
			"entryId": "1",
			"classesName": "SENG 2000",
			"descriptions": [
				"Advanced Data Structures and Algorithms",
				"Taught Python and Java based Algorithms",
				"Students are tested on sorting algorithms", 
				"New quizzes and tests from this course were introduced in this offering",
				"We explored sorting algorithms, such as MergeSort and Insertion Sort and Fast Median Selection",
				"Mid-semester we cover dynamic programming algorithms such as Longest Common Subsequence, Activity Scheduling",
				"Finally we cover graph algorithms such as Dijkstra's and Kruskal's MST",
				"We presented interactive powerpoint presentations that walk through each step of the process"
			],
			"images": [
				"index-images/algos-rslide.png"
			],
			"syllabusLinks": [
				{
				"link": "2021_SENG2000.pdf",
				"offeringSeason": "Fall",
				"offeringYear": "2020",
				"topicExposure": 
					{ 
						"algorithms": [ 		
							"Insertion Sort",
							"Quicksort"
						],
						"languages": [
							"Java",
							"Python"
						],
						"devTools": [
							"Eclipse",
							"Spyder"
						]
					}
				}
				,{
				"link": "2020_SENG2000.pdf",
				"offeringSeason": "Spring",
				"offeringYear": "2021",
				"topicExposure": 
				    { 
						"algorithms": [ 		
							"Insertion Sort",
							"Quicksort"
						],
						"languages": [
							"Java",
							"Python",
							"C++"
						],
						"devTools": [
							"Spyder",
							"Eclipse",
							"XCode"
						]
					}
				}
			], 
			"statistics": 
			{
				"rosterSize": 6,
				"dropped": 0,
				"semesterHours": 3
			}
		},
		{
			"entryId": "2",
			"classesName": "SENG 1000",
			"descriptions": [
				"Software Engineering Foundations",
				"Taught core programming abstractions, and concepts involved in designing programs",
				"We cover basic Java language constructs",
				"We explore the fundamental building blocks of programs, including goals, inputs, outputs, and constraints",
				"We explore Finite State Machines, abstractions of light processes demonstrating input and output of computers",
				"We explore UML diagrams, abstractions of Java classes and members that help programmers visualize code structure"
			],
			"images": [
				"index-images/sfounds-rslide.png"
			],
			"syllabusLinks": [
				{
				"link": "2020_SENG1000.pdf",
				"offeringSeason": "Fall",
				"offeringYear": "2020",
				"topicExposure": 
					{
						"dataStructures": [
							"objects",
							"strings"
						],
						"languages": [
							"Java"
						],
						"devTools": [
							"JFlap"
						]
					}
				}
			], 
			"statistics": 
			{ 
				"rosterSize": 0,
				"dropped": 1,
				"semesterHours": 3
			}
		},
		{
			"entryId": "3",
			"classesName": "SENG 5005",
			"descriptions": [
				"Discrete Structures",
				"We construct truth tables and decide matters of logic by combining variables of propositions through various operators.",
				"We explore commonly found collections in computing, and explore how we combine them through well-defined set Cartesian product, union and intersection operations.",
				"We cover proving logical statements valid by contradiction, contrapositive, and direct proposition, and work out how to solve logical equivalencies step-by-step in class."
			],
			"images": [
				"index-images/distructs-rslide.png",
				"dis-images/dis-sn-ap_BooleanLogic.png",
				"dis-images/dis-snap_Sets.png",
				"dis-images/dis-snap_Proofs.png"
			],
			"syllabusLinks": [
				{
				"link": "2020_SENG5005.pdf",
				"offeringSeason": "Fall",
				"offeringYear": "2020",
				"topicExposure":
					{
						"dataStructures": [ 
							"sets",
							"collections",
							"propositions"
						],
						"devTools": [
							"LaTeX"
						]
					}
				
				}
			],
			"statistics": 
			{
				"rosterSize": 8,
				"dropped": -1,
				"semesterHours": 4	
			}	
		},
		{
			"entryId": "4",
			"classesName": "SENG 1020",
			"descriptions": [
				"Data Structures for Software Engineers",
				"For each data structure, we define its key attributes, and compare how to use provided library support for languages relevant to the course offering",
				"We uncover how the Python language incorporates the ability to override procedures, and useful cases for doing so",
				"We discuss terminology commonly invoked when building object oriented software"
			],
			"images": [
				"index-images/dastructs-rslide.png",
				"das-images/das-snap_DictImpls.png",
				"das-images/das-colored_ClassDef.png",
				"das-images/das-snap-TalkObjects"
			],
			"statistics":
			{
				"rosterSize": 7,
				"dropped": 0,
				"semesterHours": 3
			},
			"syllabusLinks": [
				{
					"link":"2021_SENG1020.pdf",
					"offeringSeason": "Spring",
					"offeringYear": "2021",
					"topicExposure": 
					{ 
						"algorithms": [
							"Sorting",
							"Search",
							"Recursion"
						],
						"dataStructures": [
							"strings",
							"lists",
							"sets",
							"trees",
							"stacks",
							"queues",
							"maps",
							"dictionaries"
						],
						"languages": [
							"Java",
							"Python"
						],
						"devTools": [
							"Spyder",
							"Eclipse"
						]
					}
				}
			]
		}
		
	]
	
}